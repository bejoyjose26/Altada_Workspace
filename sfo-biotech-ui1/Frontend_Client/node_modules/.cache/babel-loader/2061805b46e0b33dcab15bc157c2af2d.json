{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Altada Workspace\\\\sfo-biotech-ui\\\\Frontend_Client\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceColorSvg = exports.downloadSvgImage = exports.loadImage = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nfunction loadImage(source) {\n  return new Promise(function (resolve, reject) {\n    if (!source) {\n      reject(\"Error tsParticles - No image.src\");\n      return;\n    }\n\n    var image = {\n      source: source,\n      type: source.substr(source.length - 3)\n    };\n    var img = new Image();\n    img.addEventListener(\"load\", function () {\n      image.element = img;\n      resolve(image);\n    });\n    img.addEventListener(\"error\", function () {\n      reject(\"Error tsParticles - loading image: \".concat(source));\n    });\n    img.src = source;\n  });\n}\n\nexports.loadImage = loadImage;\n\nfunction downloadSvgImage(source) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var image, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (source) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error(\"Error tsParticles - No image.src\");\n\n          case 2:\n            image = {\n              source: source,\n              type: source.substr(source.length - 3)\n            };\n\n            if (!(image.type !== \"svg\")) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", loadImage(source));\n\n          case 5:\n            _context.next = 7;\n            return fetch(image.source);\n\n          case 7:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            throw new Error(\"Error tsParticles - Image not found\");\n\n          case 10:\n            _context.next = 12;\n            return response.text();\n\n          case 12:\n            image.svgData = _context.sent;\n            return _context.abrupt(\"return\", image);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.downloadSvgImage = downloadSvgImage;\n\nfunction replaceColorSvg(imageShape, color, opacity) {\n  var svgData = imageShape.svgData;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  if (svgData.includes(\"fill\")) {\n    var currentColor = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n    return svgData.replace(currentColor, function () {\n      return Utils_1.getStyleFromHsl(color, opacity);\n    });\n  }\n\n  var preFillIndex = svgData.indexOf(\">\");\n  return \"\".concat(svgData.substring(0, preFillIndex), \" fill=\\\"\").concat(Utils_1.getStyleFromHsl(color, opacity), \"\\\"\").concat(svgData.substring(preFillIndex));\n}\n\nexports.replaceColorSvg = replaceColorSvg;","map":null,"metadata":{},"sourceType":"script"}