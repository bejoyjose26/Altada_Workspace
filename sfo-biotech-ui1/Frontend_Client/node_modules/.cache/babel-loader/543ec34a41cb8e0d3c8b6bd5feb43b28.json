{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Altada Workspace\\\\sfo-biotech-ui\\\\Frontend_Client\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Altada Workspace\\\\sfo-biotech-ui\\\\Frontend_Client\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SizeUpdater = void 0;\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Utils_1 = require(\"../../Utils\");\n\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nfunction updateSize(particle, delta) {\n  var _a;\n\n  var sizeOpt = particle.options.size;\n  var sizeAnim = sizeOpt.animation;\n  var sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n  var minValue = particle.size.min;\n  var maxValue = particle.size.max;\n\n  if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n    return;\n  }\n\n  switch (particle.size.status) {\n    case Enums_1.AnimationStatus.increasing:\n      if (particle.size.value >= maxValue) {\n        particle.size.status = Enums_1.AnimationStatus.decreasing;\n        particle.loops.size++;\n      } else {\n        particle.size.value += sizeVelocity;\n      }\n\n      break;\n\n    case Enums_1.AnimationStatus.decreasing:\n      if (particle.size.value <= minValue) {\n        particle.size.status = Enums_1.AnimationStatus.increasing;\n        particle.loops.size++;\n      } else {\n        particle.size.value -= sizeVelocity;\n      }\n\n  }\n\n  checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n\n  if (!particle.destroyed) {\n    particle.size.value = Utils_1.clamp(particle.size.value, minValue, maxValue);\n  }\n}\n\nvar SizeUpdater = /*#__PURE__*/function () {\n  function SizeUpdater() {\n    _classCallCheck(this, SizeUpdater);\n  }\n\n  _createClass(SizeUpdater, [{\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var sizeOpt = particle.options.size;\n      var sizeAnim = sizeOpt.animation;\n      return !particle.destroyed && !particle.spawning && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count);\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n\n      updateSize(particle, delta);\n    }\n  }]);\n\n  return SizeUpdater;\n}();\n\nexports.SizeUpdater = SizeUpdater;","map":null,"metadata":{},"sourceType":"script"}